import java.util.*;
/**
 * Allan Beckman
 * E01238245
 * Fall 20218
 * Cosc571
 * hw1115
 * https://github.com/abeckma2/Class571/blob/master/Project3
 */
public class main
{
    // instance variables - replace the example below with your own
    
    public static void main(String[] args)
    {
        int x;
        String character="";
        long sixtyforbit;
        Random rand = new Random();
        Object[] tableR=new Object[10000];
        Object[] tableS=new Object[10000];
        Hashtable<Integer,String> tableS1=new Hashtable<Integer,String>();
        String a="qwertyuiopasdfghjklzxcvbnm";
        double part=0;
        int numTuples=360;
        for(int i=1;i<=numTuples;i++)//makes table R as unsorted array and print it
        {
            x=rand.nextInt(10);
            tableR[i]=x;
            System.out.print(tableR[i]+" ");
            i++;
            for(int j =1;j<=1000;j++)//make 1000 charater string
            {
                character=character+a.charAt(rand.nextInt(26));
                
            }
            tableR[i]=character;
            System.out.print(tableR[i]+" ");
            i++;
            part=part+1;
            tableR[i]=part;
            System.out.println(tableR[i]);
            character="";//reset character
        }
        System.out.println();
        part=0;
        for(int i=1;i<=numTuples;i++)//make table S as both unsorted array and hash
        {
            x=rand.nextInt(10);
            tableS[i]=x;
            System.out.print(tableS[i]+" ");
            i++;
            for(int j =1;j<=1000;j++)
            {
                character=character+a.charAt(rand.nextInt(26));
                
            }
            tableS[i]=character;
            tableS1.put(x,character);
            System.out.print(tableS[i]+" ");
            i++;
            part=part+1;
            tableS[i]=part;
            System.out.println(tableS[i]);
            character="";
        }
        System.out.println();
        /*for(int i=1;i<=numTuples;i++)//print out hash
        {
            if(i%3==0)
            {
                System.out.println(tableS1[i]+" ");
            }
            else
            {
                System.out.print(tableS1[i]+" ");
            }
        }*/
        System.out.println();
        long s=System.nanoTime();
        for(int i=1;i<=numTuples;i++)//does equijoin on hash
        {
                if(i%3==0)
                {
                    if(tableR[i]==tableS1.get(tableR[i]))
                    {
                        System.out.println(tableR[i]+"      S="+tableS1.get(tableR[i]));
                        System.out.println(tableR[i+1]);
                        System.out.println(tableR[i+2]);
                    }
                }
        }
        long f=System.nanoTime();
        long time=f-s;//measure time for equijoin on hash
        System.out.println("time for hash is "+time+ " nanoseconds");
        s=System.nanoTime();
        for(int i=1;i<=numTuples;i++)//does equijoin on unsorted
        {
            for(int j=1;j<=numTuples;j++)
            {
                if(i%3==0&&j%3==0)
                {
                    if(tableR[i]==tableS[j])
                    {
                        System.out.println(tableR[i+1]+"      S="+tableS[j]);
                        System.out.println(tableR[i+1]+"      S="+tableS[j+1]);
                        System.out.println(tableR[i+2]+"      S="+tableS[j+2]);
                    }
                }
            }
        }
        f=System.nanoTime();
        time=f-s;//measure time for equijoin on unsorted
        System.out.println("time for 2 unsorted arrays is "+time+ " nanoseconds");
    }
}
